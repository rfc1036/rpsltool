#!/usr/bin/perl
#
# Copyright 2005-2021 by Marco d'Itri <md@linux.it>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

use warnings;
use strict;

use YAML::XS qw(Load LoadFile);
use Template;
use Storable qw(dclone);
use FindBin;

use lib "$FindBin::RealBin/lib";
use RPSLToolUtils;
use RPSLToolBGPQ3;
use RPSLToolNet;
use RPSLToolTemplate;

##############################################################################
{
# These parameters can be set in YAML files.

my %default_parameters = (
	cache_root			=> '/tmp/rpsltool',
	whois_die_on_error	=> 0,
	whois_warn_on_error	=> 1,
	whois_show_cache_misses	=> 0,
);

##############################################################################
usage(1) if not $ARGV[0];

my $input = read_file($ARGV[0]);

my ($param, $variables, $peers_config);
if (is_yaml($input)) {
	($param, $variables, $peers_config) = Load(join("\n", @$input));
	die if not defined $param;
	%$param = (%default_parameters, %$param);

	die "No template has been configured.\n" if not $param->{template};
	$input = read_file($param->{template});
} else {
	$param = dclone(\%default_parameters);
}

make_boolean($param, qw(whois_die_on_error whois_warn_on_error
	whois_warn_on_recursive_error asn32_supported));

##############################################################################
my $peers = process_peers_config($peers_config, $param);

my $data = read_data_files($param);

# open the connection to the whois server and configure the default parameters
my $whois = bgpq3_factory($param);

do_rpsl($whois, $peers);

print_template($input, {
	param	=> $param,
	var		=> $variables,
	conf	=> $peers,
	data	=> $data,
}, $whois);
exit 0;

}
##############################################################################
# Read data from YAML-formatted files defined in the router configuration.
sub read_data_files {
	my ($param) = @_;

	# get all the *_data_file program parameters from the router configuration
	my @data_files = grep { /^[a-z0-9_]+_data_file$/ } keys %$param;

	# read each file
	my $data;
	foreach my $file_name (@data_files) {
		my $file = $param->{$file_name};
		my ($var_name) = $file_name =~ /^(.+)_data_file$/;
		my $content = read_data_file($file, $var_name);
		$data->{$var_name} = $content if defined $content;
	}

	return $data;
}

# Read the $file YAML file and return the content of the $var_name key of
# its top-level hash. Any other keys are ignored.
sub read_data_file {
	my ($file, $var_name) = @_;

	die "$file does not exist!\n" if not -e $file;
	my $data = LoadFile($file);
	die "$file is empty!\n" if not defined $data;
	die "$file is not valid (lacks $var_name)!\n"
		if not exists $data->{$var_name} or not ref $data->{$var_name};

	return $data->{$var_name};
}

##############################################################################
# Performs RPSL expansion.
sub do_rpsl {
	my ($whois, $peers) = @_;

	foreach my $ip (keys %$peers) {
		foreach my $afi (qw(ipv4 ipv6 ipv4m ipv6m)) {
			my $neigh = $peers->{$ip}->{$afi} || next;
			my $ipv6 = $afi =~ /^ipv6/;

			next if not ($neigh->{import} and @{$neigh->{import}});
			my ($routes, $aspathlist) = $whois->import($neigh->{import},
				$ipv6, $neigh->{default_aspath_filter});

			# remove unwanted routes or route-sets from the final list
			# @unimport is a list of RPSL-style network filters
			my @unimport;
			foreach my $r ($neigh->{unimport}, $neigh->{global_unimport},
					$peers->{$ip}->{global_unimport}) {
				next if not ($r and @$r);
				@unimport = @{ ($whois->import($r, $ipv6))[0] };
			}
			@$routes = @{ filter_networks($routes, \@unimport, 1) }
				if @unimport;
			# for some reason which I forgot, @routes must be cloned here
			# uniq_list does it anyway
			# $neigh->{import_routes} = [ @routes ] if @routes;

			# finally store the filters
			if (@$routes) {
				$neigh->{import_routes} = $routes;
			}
			if (@$aspathlist) {
				$neigh->{import_as} = $aspathlist;
				$neigh->{aslistnum} = $neigh->{aslist} if $neigh->{aslist};
			}
		} # foreach $afi

		if (my $backup_ip = $peers->{$ip}->{backupip}) {
			$peers->{$backup_ip} = create_backup($peers->{$ip});
		}

	}
}

sub create_backup {
	my ($mainneigh) = @_;

	my $newneigh = dclone($mainneigh);
	$newneigh->{ip} = $mainneigh->{backupip};
	$newneigh->{is_backup} = 1;	# this variable is checked in the template

	# delete the elements which trigger lists generation in the template
	delete $newneigh->{$_} foreach qw(import_as import_routes backupip);
	foreach my $afi (qw(ipv4 ipv6 ipv4m ipv6m)) {
		my $neigh = $newneigh->{$afi} || next;

		delete $neigh->{$_} foreach qw(import_as import_routes);
	}

	return $newneigh;
}

##############################################################################
sub print_template {
	my ($input, $vars, $whois) = @_;

	$Template::Config::STASH = 'Template::Stash::XS';
	my $template = Template->new({
		POST_CHOMP => 1,
		DEBUG_UNDEF => 1,
#		DEBUG => 'parser, provider',
	}) or early_error("Template->new: $Template::ERROR");

	$template->create_vmethods;
	$template->create_net_vmethods;
	$template->create_whois_vmethods($whois);

	# discard the shebang line, if present
	shift @$input if @$input and $input->[0] =~ m|^#!\s*/|;

	$input = join("\n", @$input);

	my $output;
	$template->process(\$input, $vars, \$output)
		or die "Template processing has failed: " . $template->error . ".\n";

	# remove leading empty lines
	$output =~ s/^\n+//m;
	print $output;
}

##############################################################################
sub Template::create_vmethods {
	my ($template) = @_;

	my $context = $template->context;

$context->define_vmethod('scalar', 'route2cisco'  => \&route2cisco);
$context->define_vmethod('scalar', 'route2bird'   => \&route2bird);
$context->define_vmethod('scalar', 'route2junos'  => \&route2junos);
$context->define_vmethod('scalar', 'route2acl'    => \&route2acl);
$context->define_vmethod('scalar', 'route2stdacl' => \&route2stdacl);

# list versions of the precedently defined vmethods
$context->define_vmethod('list', 'route2cisco'  => sub {
	map { route2cisco($_)  } @{$_[0]}
});
$context->define_vmethod('list', 'route2bird'   => sub {
	map { route2bird($_)   } @{$_[0]}
});
$context->define_vmethod('list', 'route2junos'  => sub {
	map { route2junos($_)  } @{$_[0]}
});
$context->define_vmethod('list', 'route2acl'    => sub {
	map { route2acl($_)    } @{$_[0]}
});
$context->define_vmethod('list', 'route2stdacl' => sub {
	map { route2stdacl($_) } @{$_[0]}
});

$context->define_vmethod('list', 'hostroutes' => sub {
    map {
		my $route = $_;
		$route =~ s/\^.+$// if /\^/;
		$route . '^' . (/:/ ? 128 : 32);
	} @{$_[0]};
});

}

##############################################################################
# converts a prefix with an optional RPSL-like length filter to an IOS
# prefix-list entry
sub route2cisco {
	my ($prefix, $len, $range) = $_[0] =~ m!
		^([0-9\.:a-fA-F]+)		# prefix
		/([0-9]+)				# length
		(?:\^ ([0-9\+\-]+) )?	# optional range
		$
	!ox;

	if (not $prefix or not $len) {
		die "Cannot parse this prefix: '$_'\n";
	} elsif (not $range) {
		return "$prefix/$len";
	} elsif ($range eq '-') {
		return "$prefix/$len gt $len";
	} elsif ($range eq '+') {
		return "$prefix/$len ge $len";
	} elsif ($range =~ /^([0-9]+)$/) {
		return "$prefix/$len ge $1 le $1";
	} elsif ($range =~ /^([0-9]+)\-([0-9]+)$/) {
		return "$prefix/$len ge $1 le $2";
	} else {
		die "Cannot parse this prefix: '$_'\n";
	}
}

# converts a prefix with an optional RPSL-like length filter to a BIRD prefix
sub route2bird {
	my ($prefix, $len, $range) = $_[0] =~ m!
		^([0-9\.:a-fA-F]+)		# prefix
		/([0-9]+)				# length
		(?:\^ ([0-9\+\-]+) )?	# optional range
		$
	!ox;

	if (not $prefix or not $len) {
		die "Cannot parse this prefix: '$_'\n";
	} elsif (not $range) {
		return "$prefix/$len";
	} elsif ($range eq '-') {
		my $min = $len + 1;
		my $max = $prefix =~ /:/ ? 128 : 32;
		return "$prefix/$len\{$min,$max}";
	} elsif ($range eq '+') {
		return "$prefix/$len+";
	} elsif ($range =~ /^([0-9]+)$/) {
		return "$prefix/$len\{$1,$1}";
	} elsif ($range =~ /^([0-9]+)\-([0-9]+)$/) {
		return "$prefix/$len\{$1,$2}";
	} else {
		die "Cannot parse this prefix: '$_'\n";
	}
}

# converts a prefix with an optional RPSL-like length filter to a Junos prefix
sub route2junos {
	my ($prefix, $len, $range) = $_[0] =~ m!
		^([0-9\.:a-fA-F]+)		# prefix
		/([0-9]+)				# length
		(?:\^ ([0-9\+\-]+) )?	# optional range
		$
	!ox;

	if (not $prefix or not $len) {
		die "Cannot parse this prefix: '$_[0]'\n";
	} elsif (not $range) {
		return "$prefix/$len exact";
	} elsif ($range eq '-') {
		return "$prefix/$len longer";
	} elsif ($range eq '+') {
		return "$prefix/$len orlonger";
	} elsif ($range =~ /^([0-9]+)$/) {
		return "$prefix/$len upto /$1";
	} elsif ($range =~ /^([0-9]+)\-([0-9]+)$/) {
		return "$prefix/$len prefix-length-range /$1-/$2";
	} else {
		die "Cannot parse this prefix: '$_[0]'\n";
	}
}

# converts a prefix with an optional RPSL-like length filter to
# a network/netmask pair separated by a space
sub route2acl {
	my ($prefix, $len) = $_[0] =~ m!
		^([0-9\.:a-fA-F]+)		# prefix
		/([0-9]+)				# length
		(?:\^ [0-9\+\-]+ )?		# ignored range
		$
	!ox;

	$len = 32 if $len > 32 or $len < 0;
	my $bits = '1' x $len . '0' x (32 - $len);
	return $prefix . ' ' . join('.', unpack('CCCC', pack('B*', $bits)));
}

# same thing for network/wildcard pairs
sub route2stdacl {
	my ($prefix, $len) = $_[0] =~ m!
		^([0-9\.:a-fA-F]+)		# prefix
		/([0-9]+)				# length
		(?:\^ [0-9\+\-]+ )?		# ignored range
		$
	!ox;

	$len = 32 if $len > 32 or $len < 0;
	my $bits = '0' x $len . '1' x (32 - $len);
	return $prefix . ' ' . join('.', unpack('CCCC', pack('B*', $bits)));
}

##############################################################################
sub usage {
	print STDERR <<END;
Usage: rpsltool CONFIG-FILE
       rpsltool TEMPLATE-FILE
END
	exit(shift);
}

