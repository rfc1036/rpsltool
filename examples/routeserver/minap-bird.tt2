[%
# vim: syntax=tt2 shiftwidth=2 autoindent
USE date;
USE wrap;

# determine the "short" alphanumeric name of each neighbor
FOREACH ip = conf.keys;
  IF conf.$ip.name;
    conf.$ip.name = conf.$ip.name | lower;
  ELSIF conf.$ip.description;
    conf.$ip.name = conf.$ip.description.replace('[^a-zA-Z0-9]+', '') | lower;
  ELSE;
    conf.$ip.name = 'as' _ conf.$ip.as;
  END;
END;

# Remove the IPv4 or the IPv6 peers depending on the "ipv6" configuration
# variable in the template, because BIRD needs one config file for each AFI.
FOREACH ip = conf.keys;
  neigh = conf.$ip;
  IF    var.ipv6 == 'y' AND NOT ip.match(':');
    conf.delete(ip);
  ELSIF var.ipv6 == 'n' AND     ip.match(':');
    conf.delete(ip);
  END;
END;

%]
/*****************************************************************************
*
* BIRD configuration for rs1.minap.it
* Generated on [% date.format(date.now, '%F %T') %].
*
*****************************************************************************/
/* http://bird.network.cz/?get_doc&f=bird-3.html */

timeformat base         iso long;
timeformat log          iso long;
timeformat protocol     iso long;
timeformat route        iso long;

router id 185.1.114.252;
[% IF var.ipv6 == 'y' %]
listen bgp address 2001:7f8:c5::1;
[% ELSE %]
listen bgp address 185.1.114.252;
[% END %]

#debug protocols { states, routes, filters };
debug protocols { states };

# must be configured, even empty, or BGP will be silently disabled
protocol device { }

/****************************************************************************/
# From https://www.euro-ix.net/en/forixps/large-bgp-communities/

# RS:1000-1999:* Informational

# RS:1000:* RPKI filtering outcome
define IXP_LC_INFO_RPKI_NOT_CHECKED		= ([% var.myasn %], 1000, 3);
# RS:1001:* IRRDB filtering outcome
define IXP_LC_INFO_IRRDB_VALID			= ([% var.myasn %], 1001, 1);
define IXP_LC_INFO_IRRDB_NOT_CHECKED		= ([% var.myasn %], 1001, 2);
define IXP_LC_INFO_IRRDB_MORE_SPECIFIC		= ([% var.myasn %], 1001, 3);
define IXP_LC_INFO_IRRDB_FILTERED_LOOSE		= ([% var.myasn %], 1001, 1000);
define IXP_LC_INFO_IRRDB_FILTERED_STRICT	= ([% var.myasn %], 1001, 1001);
define IXP_LC_INFO_IRRDB_PREFIX_EMPTY		= ([% var.myasn %], 1001, 1002);

# RS:1100-1199:* Filtered reasons
# RS:1101:* Route was filtered on import
define IXP_LC_FILTERED_PREFIX_LEN_TOO_LONG	= ([% var.myasn %], 1101, 1);
define IXP_LC_FILTERED_PREFIX_LEN_TOO_SHORT	= ([% var.myasn %], 1101, 2);
define IXP_LC_FILTERED_BOGON			= ([% var.myasn %], 1101, 3);
define IXP_LC_FILTERED_BOGON_ASN		= ([% var.myasn %], 1101, 4);
define IXP_LC_FILTERED_AS_PATH_TOO_LONG		= ([% var.myasn %], 1101, 5);
define IXP_LC_FILTERED_AS_PATH_TOO_SHORT	= ([% var.myasn %], 1101, 6);
define IXP_LC_FILTERED_FIRST_AS_NOT_PEER_AS	= ([% var.myasn %], 1101, 7);
define IXP_LC_FILTERED_NEXT_HOP_NOT_PEER_IP	= ([% var.myasn %], 1101, 8);
define IXP_LC_FILTERED_IRRDB_PREFIX_FILTERED	= ([% var.myasn %], 1101, 9);
define IXP_LC_FILTERED_IRRDB_ORIGIN_AS_FILTERED	= ([% var.myasn %], 1101, 10);
define IXP_LC_FILTERED_PREFIX_NOT_IN_ORIGIN_AS	= ([% var.myasn %], 1101, 11);
define IXP_LC_FILTERED_TRANSIT_FREE_ASN		= ([% var.myasn %], 1101, 14);

/****************************************************************************/
/* http://bird.network.cz/?get_doc&f=bird-5.html */

function invalid_prefix()
prefix set invalid;
{
	invalid = [
[% IF var.ipv6 == 'y' %]
		3ffe::/16+, 2001:db8::/32+,
		fe00::/9+, ff00::/8+, ::/128-,
		::0/0{0,15}, ::/0{49,128}
[% ELSE %]
		10.0.0.0/8+, 192.168.0.0/16+, 172.16.0.0/12+,
		127.0.0.0/8+, 169.254.0.0/16+, 224.0.0.0/4+, 240.0.0.0/4+,
		0.0.0.0/32-, 0.0.0.0/0{0,7}, 0.0.0.0/0{25,32}
[% END %]
	];
	if net ~ invalid then return true;
	return false;
}

# http://bgpfilterguide.nlnog.net/guides/bogon_asns/
function reject_bogon_asns()
int set bogon_asns;
{
	bogon_asns = [
		0,		# RFC 7607
		23456,		# RFC 4893 AS_TRANS
		64496..64511,	# RFC 5398 and documentation/example ASNs
		64512..65534,	# RFC 6996 Private ASNs
		65535,		# RFC 7300 Last 16 bit ASN
		65536..65551,	# RFC 5398 and documentation/example ASNs
		65552..131071,	# RFC IANA reserved ASNs
		4200000000..4294967294, # RFC 6996 Private ASNs
		4294967295	# RFC 7300 Last 32 bit ASN
	];

	if (bgp_path ~ bogon_asns) then {
		print "REJECT: bogon AS_PATH: ", net, " ", bgp_path;
		return true;
	}

	return false;
}

# http://bgpfilterguide.nlnog.net/guides/no_transit_leaks/
function transit_path(int peeras)
int set transit_free_as;
{
	transit_free_as = [
		# good for Italy
		137, 1267, 3269, 12874,
		# inspired by https://en.wikipedia.org/wiki/Tier_1_network
[% IF var.ipv6 == 'n' %]
		209, 4134, 12956,
[% END %]
		174,      286, 701, 702, 703, 1239, 1299,
		2828, 2914, 3257, 3320, 3356, 3491, 3549, 3561,
		      5511, 6453, 6461, 6762, 6830, 7018
	];

	if bgp_path.first ~ transit_free_as then return false;

	if (bgp_path ~ transit_free_as) then {
		print "REJECT: Transit ASN from ", peeras, ": ",
			net, " ", bgp_path;
		return true;
	}
	return false;
}

/****************************************************************************/
# Do the checks common to all peers, called by the <ASN>_in filters.
function bad_prefix(int peeras)
{
	if (bgp_path.len < 1) then {
		bgp_large_community.add(IXP_LC_FILTERED_AS_PATH_TOO_SHORT);
		return true;
	}

	# enforce the presence of the peer AS as the first AS of the path
	if (bgp_path.first != peeras) then {
		bgp_large_community.add(IXP_LC_FILTERED_FIRST_AS_NOT_PEER_AS);
		return true;
	}

	# Filter small prefixes
[% LONG_PREFIX_FILTER = var.ipv6 == 'y' ? '::/0{49,128}' : '0.0.0.0/0{25,32}' %]
	if (net ~ [ [% LONG_PREFIX_FILTER %] ]) then {
		bgp_large_community.add(IXP_LC_FILTERED_PREFIX_LEN_TOO_LONG);
		return true;
	}

	if invalid_prefix() then {
		bgp_large_community.add(IXP_LC_FILTERED_BOGON);
		return true;
	}

	if reject_bogon_asns() then {
		bgp_large_community.add(IXP_LC_FILTERED_BOGON_ASN);
		return true;
	}

	# reject routes with transit-free ASNs in the path
	if transit_path(peeras) then {
		bgp_large_community.add(IXP_LC_FILTERED_TRANSIT_FREE_ASN);
		return true;
	}

	if (bgp_path.len > 64) then {
		bgp_large_community.add(IXP_LC_FILTERED_AS_PATH_TOO_LONG);
		return true;
	}

	return false;
}

/****************************************************************************/
/*
This is the flow of routes inside the route server:
protocol bgp:  import filter <ASN>_in
               From the BGP neighbor to the peer table.
               Tag the invalid routes that need to be dropped later.
protocol pipe: import filter export_to_master
               From the peer table to the master table.
               Reject the routes tagged as invalid in the <ASN>_in filter.
protocol pipe: export where ixp_community_filter(<ASN>)
               From the master table to the peer table.
               Apply the TE communities set by members.
               Reject the routes which peers asked to announce selectively.
protocol bgp:  export filter export_to_peer
               From the peer table to the BGP neighbor.
               Removes the looking glass communities.
*/

/****************************************************************************/
# From the peer table to the master table.
filter export_to_master
{
	# drop the routes tagged to be filtered in the <ASN>_in filter
	if (bgp_large_community ~ [([% var.myasn %], 1101, *)]) then reject;

	accept;
}

/****************************************************************************/
# From the master table to the peer table.
function ixp_community_filter(int peerasn)
{
	# sanity check: ignore routes not learned from BGP
	if !(source = RTS_BGP) then return false;

	# graceful shutdown well known community
	if (65535, 0) ~ bgp_community then {
		bgp_local_pref = 0;
	}

	# blackholing community
	if (65535, 666) ~ bgp_community then {
[% IF var.ipv6 == 'y' %]
		bgp_next_hop = 2001:7f8:c5::666;
[% ELSE %]
		bgp_next_hop = 185.1.114.66;
[% END %]
	}

	# Large BGP Communities
	# do not advertise to <peerasn>
	if ([% var.myasn %], 0,peerasn) ~ bgp_large_community then return false;
	# advertise to <peerasn>
	if ([% var.myasn %], 1,peerasn) ~ bgp_large_community then return true;
	# do not advertise to any peer
	if ([% var.myasn %], 0,0)       ~ bgp_large_community then return false;
	# advertise to all peers
	if ([% var.myasn %], 1,0)       ~ bgp_large_community then return true;

	# mapping of large communities to normal communities:
	# mapping base = 2^16-2^(32-23) = 65024
	# mapped community = base + last_byte(v4_address)

	case peerasn {
		# skip any large ASN not yet defined
		65536 .. 4294967295: return true;
	}

	# Normal communities
	# do not advertise to <peerasn>
	if (0,     peerasn)           ~ bgp_community  then return false;
	# advertise to <peerasn>
	if ([% var.myasn %], peerasn) ~ bgp_community  then return true;
	# do not advertise to any peer
	if (0,     [% var.myasn %])   ~ bgp_community  then return false;
[% IF var.defaultdeny %]
	# advertise to all peers
	if ([% var.myasn %], [% var.myasn %]) ~ bgp_community  then return true;
	return false;
[% ELSE %]
	return true;
[% END %]
}

/****************************************************************************/
# From the peer table to the BGP neighbor.
filter export_to_peer
{
	# remove the route servers communities
	bgp_large_community.delete([([% var.myasn %], *, *)]);
	bgp_community.delete([([% var.myasn %], *)]);
	bgp_community.delete([(0, *)]);

	accept;
}

/****************************************************************************/
template bgp tb_rsclient {
	local as [% var.myasn %];
	passive;

	interpret communities no;
	export filter export_to_peer;
	rs client;
}

/****************************************************************************/
/* For the pipe protocol, export filters control export of routes from the
 * primary table ("table") to the secondary one ("peer table"), import
 * filters control the opposite direction.
 */
[% seen = [] %]
[% FOREACH ip = conf.keys.ipsort %]
[%
neigh = conf.$ip;
afi = var.ipv6 == 'y' ? 'ipv6' : 'ipv4';

# generate the configuration once even if the AS has multiple addresses
IF seen.${neigh.as};
  NEXT;
ELSE;
  seen.${neigh.as} = 1;
END;
%]
filter [% neigh.name %]_in
prefix set networks_in;
int set asn_in;
{
	if bad_prefix([% neigh.as %]) then accept;

	# prevent next-hop hijacking
	if (from != bgp_next_hop) then {
		print "REJECT: BGP neighbor address ", from,
		" != next hop address ", bgp_next_hop,
		" for ", net, " path:", bgp_path;
		bgp_large_community.add(IXP_LC_FILTERED_NEXT_HOP_NOT_PEER_IP);
		accept;
	}

[% IF neigh.$afi.import_as AND neigh.$afi.import_as.size > 0 %]
	asn_in = [
[% neigh.$afi.import_as.nsort.join(', ') | wrap +%]
	];
	if (bgp_path.last_nonaggregated !~ asn_in) then {
		bgp_large_community.add(IXP_LC_FILTERED_IRRDB_ORIGIN_AS_FILTERED);
		accept;
	}

[% END %]
	bgp_large_community.add(IXP_LC_INFO_RPKI_NOT_CHECKED);

[% IF neigh.$afi.import_routes AND neigh.$afi.import_routes.size > 0 %]
	networks_in = [
[% neigh.$afi.import_routes.ipsort.route2bird.join(', ') | lower | wrap +%]
	];
	if (net !~ networks_in) then {
		bgp_large_community.add(IXP_LC_FILTERED_IRRDB_PREFIX_FILTERED);
		bgp_large_community.add(IXP_LC_INFO_IRRDB_FILTERED_STRICT);
		accept;
	} else {
		bgp_large_community.add(IXP_LC_INFO_IRRDB_VALID);
	}

[% END %]
	accept;
}

table T_[% neigh.name | upper %];

protocol pipe P_[% neigh.name | upper %] {
	table master;
	mode transparent;
	peer table T_[% neigh.name | upper %];
	import filter export_to_master;
	export where ixp_community_filter([% neigh.as %]);
}


[% END %]

/****************************************************************************/
/* http://bird.network.cz/?get_doc&f=bird-6.html */

[% seen = [] %]
[% FOREACH ip = conf.keys.ipsort %]
[%
neigh = conf.$ip;

# Use a different name when there are multiple neighbors from the same AS.
# The regexp needs to be modified if the peering network is > /24.
IF seen.${neigh.as};
  extraname = '_' _ ip.remove('^.+[\.:]');
ELSE;
  seen.${neigh.as} = 1;
  extraname = '';
END;
%]
protocol bgp [% neigh.name | upper %][% extraname %] from tb_rsclient {
[% IF neigh.description %]
	description "[% neigh.description %]";
[% END %]
	neighbor [% ip %] as [% neigh.as %];
	table T_[% neigh.name | upper %];
[% IF neigh.maxpref %]
	import limit [% neigh.maxpref %] action restart;
[% END %]
	import filter [% neigh.name %]_in;
[% FOREACH cmd = neigh.bgp_commands %]
	[% cmd %];
[% END %]
}

[% END %]

/* END OF FILE MARKER */

